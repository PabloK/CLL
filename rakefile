#encoding: utf-8
require 'bundler/setup'
require './config/environment'
require './lib/models'
require 'dm-migrations'

desc "Recreate database from DataMapper model"
task :migrate do
  DataMapper.auto_migrate!   
  puts "[rake]: Database has been rebuilt."
end

desc "Upgrade database from DataMapper model"
task :upgrade do
  DataMapper.auto_upgrade!   
  puts "[rake]: Database has been upgraded."
end

desc "Auto populate with static data"
task :autopopulate do
  default = YAML::load_file(File.open('config/default_data.yml'))

  # Populate database with default areas
  default['areas'].each do |area|
    unless Area.exists(area)
      new_area = Area.new 
      new_area.name = area
      unless new_area.save
        new_area.errors.each do |error|
          puts error 
        end
        abort("Could not intialize database with default values")
      else
        puts "[rake]: Populated areas with #{area}" 
      end
    end
  end
  
  # Populate database with default tracks
  default['tracks'].each do |track|
    unless ConsultantTrack.exists(track)
      new_track = ConsultantTrack.new 
      new_track.name = track
      unless new_track.save
        abort("Could not intialize database with default values")
      else
        puts "[rake]: Populated areas with #{track}" 
      end
    end
  end

  # Populate database with default tracks
  default['base_abilities']['tracks'].each do |track|
    current_track = ConsultantTrack.first(:name.like => track['name'])
    next unless current_track

    # Finding each Area
    track['areas'].each do |area|
      current_area = Area.first(:name.like => area['name'])
      next unless current_area

      # Abilities in an area to each track
      area['abilities'].each do |ability|
        current_ability = Ability.use_ability(current_area.id, ability)[:ability]
        next unless current_ability 
        next if current_track.has_ability?(current_ability.id)
        puts "[rake]: Adding ability #{current_ability.name} in #{current_area.name} to track #{current_track.name}"
        current_track.abilities << current_ability
        current_track.save
      end
    end
  end

end

desc "Run system wide test suite."
begin
  ENV['RACK_ENV'] = "test"
  require 'rspec/core/rake_task'
  RSpec::Core::RakeTask.new(:spec) do |spec|
    spec.pattern = 'spec/**/*_spec.rb'
    spec.rspec_opts = ['--color --format documentation']
  end
  task :default => :spec
  
  rescue LoadError
end
